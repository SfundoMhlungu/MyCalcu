{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","lo","require","isdot","l","sign","props","with","no","start","dot","state","input","i","charAt","undefined","dot2","i_","range","length","console","log","without","get","p","previous","str","str1","replace","setState","second","str2","ouput","eval","clear","op","count","style","calBack","sep","pos","this","id","CalLayout","twocol","onClick","bind","tworow","React","Component","position","gridColumn","gridRow","display","gridTemplateColumns","gridTemplateRows","height","top","left","backgroundColor","width"],"mappings":"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","file":"static/js/main.5080c18d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';   how u import css\n// var count = 0;\nimport * as math from 'mathjs'\n\nvar lo = require('lodash');\nvar isdot = false\nvar l;\nvar sign = false\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\nthis.state= {\n  input: '0',\n  ouput: '',\n  previous: '',\n  op: [],\n  count: 0,\n  second: '',\n\n}\n  }\n\n\n with = (no) =>{\n\n\n\n  var dot = this.state.input \n  var start;\n  for(var i in dot){\n    if(dot.charAt(i) === '+' || dot.charAt(i) === '*' || dot.charAt(i) === '/' || dot.charAt(i) === '-' ){\n     start = i\n    }\n  }\n\nif(start !== undefined){\n  var dot2 = this.state.input \n  for(var i_ in lo.range(start, dot.length)){\n    console.log('char', dot2.charAt(start))\n    console.log('in range')\n    console.log(i_)\n    console.log(dot.charAt(i_))\n    if ('.' === dot.charAt(i_)){\n        \n      isdot = true\n      console.log(isdot)\n\n    }\n\n  }\n\n}\n \n\n }\n\n without = (no) => {\n  var dot = this.state.input \n\n  if(no === '.'){\n    for( var i in dot){\n    \n      if ('.' === dot.charAt(i)){\n        \n        isdot = true\n\n      }\n    }\n  }\n\n }\n\n  get = (no) =>{\n    var p = this.state.previous\n    isdot = false\n    \n    \n\n    if(p === '+' || p === '-' || p === '*' || p === '/'){\n      sign = true\n    }\n\n    \n\nif(no === '.' && sign === false){\n  this.without(no);\n}\n  else if(sign=== true){\n    this.with(no)\n    console.log('calling with')\n    \n  }\n    \n\n    \n\n\n    \n\n  if(isdot){\n    if(no === '.'){\n      no = ''\n    }\n\n  }\n    \n\n  \n\n   \n\n    if(p === '+' || p === '-' || p === '*' || p === '/'){\n      var str = this.state.input;\n      isdot = false\n      \n\n      if(no === '+'){\n        \n      var  str1 = str.replace(/.$/,'+')\n    \n       this.setState({\n         second: str1\n       })\n       \n        \n     \n       \n\n      }\n\n      else if(no === '*'){\n\n     str1 = str.replace(/.$/,'*')\n\n        this.setState({\n          second: str1\n        })\n\n      }\n\n      else if(no === '/'){\n       str1 = str.replace(/.$/,'/')\n\n        this.setState({\n          second: str1\n        })\n      }\n      // eslint-disable-next-line no-mixed-operators\n      if(p === '-' ){\n      if( no === '*' || no === '/' || no ==='+'){\n    \n        str1 = str.replace(/.$/,no)\n        \n        \n        console.log(str1.charAt(str1.length -1))\n        if(str1.charAt(str1.length -1) === '*' || str1.charAt(str1.length -1) === '/' || str1.charAt(str1.length -1) === '+' || str1.charAt(str1.length -1) - 1 === '-'){\n          console.log('got the index')\n          console.log(str1.charAt(str1.length -2))\n         var str2 = str1.replace(str1.charAt(str1.length -2), '')\n         console.log('str2',str2)\n        }\n\n        this.setState({\n          second: str2\n        })\n      }\n    }\n    }\n    if(no === '0' && this.state.input === '0'){\n      this.setState({\n        input: '0'\n      })\n    }\n    else{\n      if(this.state.input === '0'){\n        this.setState({\n          input: no,\n          \n          previous: no\n        })\n      }\n      else{\n\n        if(this.state.second === ''){\n\n        \n        this.setState({\n          input: this.state.input + no,\n          \n          previous: no\n        })\n      }\n\n      else{\n        this.setState({\n          input: this.state.second + no,\n          \n          previous: no,\n          second: ''\n        })\n\n\n      }\n       \n       \n      }\n    }\n\n  if(no === '=' && this.state.ouput === ''){\n    this.setState({\n      input:  eval(this.state.input)\n\n    })\n  \n   \n     \n  }\n\n\n   \n\n  }\n  clear = () => {\n    this.setState({\n      input: '0',\n  ouput: '',\n  previous: '',\n  op: '',\n  count: 0,\n  second: '',\n\n    })\n\n\n    sign = false\n\n \n  }\n  render(){\n    return (\n      <div>\n        <div style={calBack} >\n          <div style={sep}>\n            <div style={pos}>\n            {this.state.ouput}\n            </div>\n            <div style={pos} id='display'> \n            {this.state.input}\n\n            </div>\n            \n           \n\n          </div>\n          <div style={CalLayout}>\n            <button style={twocol} id='clear' onClick={this.clear}>AC</button>\n            <button id='divide' onClick={this.get.bind(this, '/')}>/</button>\n            <button id='multiply' onClick={this.get.bind(this, '*')}>X</button>\n            <button id='seven' onClick={this.get.bind(this, '7')}>7</button>\n            <button id='eight' onClick={this.get.bind(this, '8')}>8</button>\n            <button id='nine' onClick={this.get.bind(this, '9')}>9</button>\n            <button id='subtract' onClick={this.get.bind(this, '-')}>-</button>\n            <button id='four' onClick={this.get.bind(this, '4')}>4</button>\n            <button id='five' onClick={this.get.bind(this, '5')}>5</button>\n            <button id='six' onClick={this.get.bind(this, '6')}>6</button>\n            <button id='add' onClick={this.get.bind(this, '+')}>+</button>\n            <button id='one' onClick={this.get.bind(this, '1')}>1</button>\n            <button id='two' onClick={this.get.bind(this, '2')}>2</button>\n            <button id='three' onClick={this.get.bind(this, '3')}>3</button>\n            <button style={tworow} id='equals' onClick={this.get.bind(this, '=')}>=</button>\n            <button style={twocol} id='zero' onClick={this.get.bind(this, '0')}>0</button>\n            <button id='decimal' onClick={this.get.bind(this, '.')}>.</button>\n\n\n       \n          </div>\n\n        </div>\n      </div>\n      \n      );\n      \n  }\n\n}\n\n\n\nconst pos = {\n  position: 'relative',\n  \n \n\n\n \n\n}\n\n\n\nconst twocol = {\n  gridColumn: '1/3'\n\n\n}\n\nconst tworow = {\n  gridRow: '4/6',\n  gridColumn: '4/5'\n\n\n}\n\nconst CalLayout = {\n  display: 'grid',\n  gridTemplateColumns: '1fr 1fr 1fr 1fr',\n  gridTemplateRows: '1fr 1fr 1fr 1fr 1fr 1fr',\n  height: '100%'\n\n}\n\nconst sep ={\n  display: 'grid',\n \n  gridTemplateRows: '1fr 1fr',\n\n}\n\nconst calBack = {\n  display: 'grid',\n \n  gridTemplateRows: '20% 80%',\n \n  \n  position: 'absolute',\n  top:'100px',\n  left: '100px',\n  backgroundColor: '#202027',\n  width: '50%',\n  height: '70%',\n\n}\n\nexport default App;\n //handling mutliple zeros\n  //   if(no === '0' && this.state.input === '0'){\n  //     this.setState({\n  //       input: '0'\n  //     })\n  //   }\n  //   // handling entry of any oparator\n  //   else if(no === '+' || no === '-' || no === '*' || no === '/'){\n  //     console.log('operator else')\n  //     var p = this.state.previous; \n   \n  //     if(p !== '+' && p !== '*' && p !== '/' && p !== '-'){\n     \n    \n  //       if(no === '+'){\n          \n          \n        \n  //   if(this.state.count === 0)\n   \n         \n  //         { console.log('equal 0')\n            \n  //           this.setState({\n            \n  //           ouput: this.state.input,\n  //           op: '+',\n  //           input: '',\n  //           previous: no,\n  //           count: this.state.count + 1\n\n            \n          \n            \n           \n  //         })\n\n  //       }\n  //       else if(this.state.count === 1){\n  //         this.setState({\n  //           count: this.state.count + 1,\n  //           second: this.state.input\n  //         })\n\n                  \n\n         \n         \n  //       }\n\n  //       // else{\n  //       //   console.log('state op == +')\n  //       //   console.log(this.state.second)\n           \n  //       //   this.setState({\n  //       //      input: Number(this.state.ouput) + Number(this.state.second),\n  //       //      previous: '',\n  //       //      op: '',\n  //       //      second: '',\n  //       //      count: 0\n\n  //       //   }) \n          \n  //       // }\n     \n  //       }\n  //       else if(no === '*'){\n  //         console.log('no = *')\n  //         this.setState({\n  //           ouput: this.state.input,\n  //           op: '*',\n  //           input: '',\n  //           previous: no\n  //         })\n  //       }\n\n  //       else if(no === '/'){\n  //         this.setState({\n  //           ouput: this.state.input,\n  //           op: '/',\n  //           input: '',\n  //           previous: no\n  //         })\n  //       }\n\n  //       else if(no === '-'){\n  //         this.setState({\n  //           ouput:  this.state.input,\n  //           op: '-',\n  //           input: '',\n  //           previous: no\n          \n\n  //         })\n  //       }\n  //     }\n\n  //     //handling mulptiple op\n\n  //     if(p === '+' || p === '/' || p === '*'){\n\n  //        this.setState({\n  //          op : no\n  //        })\n\n  //     }\n  //     //handling minus alone\n  //     if(no === '-'){\n  //       console.log('p from minus:',p)\n       \n  //       if(p === '-'){\n  //         this.setState({\n           \n  //           op: '--',\n  //           input: '',\n          \n\n  //         })\n  //       }\n\n  //       else if(p === '*'){\n  //         this.setState({\n            \n  //           op: '*-',\n  //           input: ''\n\n  //         })\n\n  //       }\n  //       else if(p === '/'){\n  //         this.setState({\n           \n  //           op: '/-',\n  //           input: ''\n\n  //         })\n  //       }\n\n  //       else if(p === '+'){\n  //         this.setState({\n           \n  //           op: '+-',\n  //           input: ''\n\n  //         })\n  //       }\n\n      \n  //     }\n   \n\n  //   }\n\n  //   // handling normal numbers\n\n  //   else{\n  //     if(this.state.input === '0'){\n  //       this.setState({\n  //         input: no,\n  //         previous: no\n\n  //       })\n\n  //     }\n     \n  //     else{\n  //       this.setState({\n  //         input: this.state.input + no,\n  //         previous: no\n  //       })\n  //       console.log(this.state.ouput)\n  //       if(this.state.count === 2){\n  //         console.log('not null',this.state.op)\n  //         if(this.state.op === '+'){\n  //           console.log('state op == +')\n           \n  //           this.setState({\n  //              input: Number(this.state.ouput) + Number(no),\n  //              previous: '',\n  //              op: '',\n  //              count: 0\n  //           }) \n  //         }\n\n  //         else if(this.state.op === '*'){\n  //           console.log('state op == *')\n           \n  //           this.setState({\n  //              input: Number(this.state.ouput) * Number(no)\n  //           }) \n  //         }\n\n  //         else if(this.state.op === '-'){\n  //           console.log('state op == -')\n           \n  //           this.setState({\n  //              input: Number(this.state.ouput) - Number(no)\n  //           }) \n  //         }\n\n  //         else if(this.state.op === '/'){\n  //           console.log('state op == /')\n           \n  //           this.setState({\n  //              input: Number(this.state.ouput) / Number(no)\n  //           }) \n  //         }\n\n  //         else if(this.state.op === '--'){\n  //           console.log('state op == --')\n           \n  //           this.setState({\n  //              input: Number(this.state.ouput) -(-Number(no))\n  //           }) \n  //         }\n  //         else if(this.state.op === '*-'){\n  //           console.log('state op == *-')\n  //          var st = Number(this.state.ouput);\n  //          var n = Number(no);\n           \n  //          var total = Math.imul(st, n)\n  //          console.log(total)\n  //          console.log(-(total))\n\n\n           \n  //           this.setState({\n  //              input: -(total)\n  //           }) \n  //         }\n  //         else if(this.state.op === '/-'){\n  //           console.log('state op == /-')\n           \n  //           this.setState({\n  //              input: Number(this.state.ouput) /(-Number(no))\n\n  //           }) \n  //         }\n  //         else if(this.state.op === '+-'){\n  //           console.log('state op == +-')\n           \n  //           this.setState({\n  //              input: Number(this.state.ouput) + (-Number(no))\n  //           }) \n  //         }\n  //         else{\n  //           console.log('angazi')\n  //         }\n          \n  //       }\n  //     }\n      \n  //   }"],"sourceRoot":""}